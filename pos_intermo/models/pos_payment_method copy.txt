# from odoo.exceptions import UserError
# from odoo import fields, models, api, _
# from odoo.http import request
# from .intermo_pos_request import IntermoPosRequest
# import qrcode
# from io import BytesIO
# import base64
# import requests
# import random
# import logging
# import json

# _logger = logging.getLogger(__name__)


# class PosSession(models.Model):
#     _inherit = 'pos.session'

#     def _loader_params_pos_payment_method(self):
#         result = super()._loader_params_pos_payment_method()
#         result['search_params']['fields'].append('intermo_public_key')
#         result['search_params']['fields'].append('intermo_plugin_key')
#         result['search_params']['fields'].append('intermo_auth_key')
#         result['search_params']['fields'].append('intermo_secret_key')
#         result['search_params']['fields'].append('intermo_secret_key')
#         return result

# class PosPaymentMethod(models.Model):
#     _inherit = 'pos.payment.method'

#     intermo_settings_id = fields.Many2one('intermo.settings', string="Intermo Settings")
#     intermo_mode = fields.Selection([('test', 'Sandbox'), ('live', 'Production')])
#     intermo_public_key = fields.Char(related='intermo_settings_id.api_key', readonly=True)
#     intermo_plugin_key = fields.Char(related='intermo_settings_id.plugin_key', readonly=True)
#     intermo_secret_key = fields.Char(related='intermo_settings_id.secret_key', readonly=True)
#     intermo_auth_key = fields.Char(related='intermo_settings_id.auth_key', readonly=True)

#     intermo_mode = fields.Selection([('test', 'Sandbox'), ('live', 'Production')])
#     intermo_public_key = fields.Char('Intermo Public Key')

#     def _get_default_plugin_key_intermo(self):

#         # Function to generate a random 18-digit number
#         def generate_random_18_digit(number_of_digit):
#             return random.randint((10 ** (number_of_digit - 1)), ((10 ** number_of_digit) - 1))

#         # Generate and print the number
#         random_number = generate_random_18_digit(18)
#         return random_number


#     intermo_plugin_key = fields.Char('Intermo Plugin Key', default=_get_default_plugin_key_intermo)
#     intermo_auth_key = fields.Char('Intermo Auth Token')
#     intermo_secret_key = fields.Char('Intermo Secret Key')




#     def _get_payment_terminal_selection(self):
#         return super()._get_payment_terminal_selection() + [('intermo', 'Intermo')]

#     def intermo_get_payment_status(self, data):
#         _logger.info(f"check {data}")
        
#         url = f'https://prodapi.intermo.net/api/v1/pos/status/{data}'


# # Retrieve the singleton settings record
#         settings = self.env['intermo.settings'].search([], limit=1)
#         if not settings:
#             raise UserError("Intermo Settings not configured.")

#         # Log the keys from intermo.settings
#         _logger.info(f"Using Intermo settings keys: Public Key: {settings.sandbox_api_key}, "
#                      f"Secret Key: {settings.sandbox_secret_key}, "
#                      f"Auth Token: {settings.sandbox_auth_key}")


#         # return "payment_successed"
#         if self.intermo_mode == 'test':
#             url = f'http://localhost:7777/api/v1/pos/status/{data}'
#         else:
#             url = f'http://localhost:7777/api/v1/pos/status/{data}'

#         payload = json.dumps({
#             "publicApiKey": self.intermo_public_key,
#             "secretKey": self.intermo_secret_key
#             # 'pluginkey' : self.intermo_plugin_key
#         })
#         headers = {
#             'Content-Type': 'application/json',
#             'Authorization': f'Bearer {self.intermo_auth_key}'
#         }

#         _logger.info("Testing on line 73 code...........")
#         # Use `params` instead of `data` for GET requests
#         #response = requests.request("GET",url, headers=headers, data=payload)
#         # url = "http://localhost:7777/api/v1/pos/status/eyJhbGciOiJIUzI1NiJ9.eyJpcEFkZHJlc3MiOiIwOjA6MDowOjA6MDowOjEiLCJtX0lkIjoxMDAwMjcsInR4bl9pZCI6Im9zRzE2ZkdhbHdmT25BOWIiLCJzYW5kYm94TW9kZSI6dHJ1ZSwiaWF0IjoxNzMwNzMxOTUxLCJleHAiOjE3MzA3MzU1NTF9.wv3F0YDN-Fe87t6RfeBiHOfJU81t5VoqHsCRQYnfI-8"

#         # payload = json.dumps({
#         # "publicApiKey": "Cxdhpfa1PXOEpSC4OolJ6P46Yg4a5tBvtEcKnejOj0",
#         # "secretKey": "bvmUXhOGYodJY9l9qJtCBXlQZYdKz7TbyMlfPF9HaQ"
#         # })
#         # headers = {
#         # 'Content-Type': 'application/json',
#         # 'Authorization': 'Bearer AztlQdnChLPRTC6HWcivlaKfusDkXiV29bU3MnHalQ'
#         # }

#         response = requests.request("GET", url, headers=headers, data=payload)
#         # _logger.info("Response :: ", response.text)
#         # Print the response to see the result
#         return json.loads(response.text)['paymentStatus']
#         return "payment_successed"


#     def intermo_make_payment_request(self, data):
#         intermo = IntermoPosRequest(self)
#         body = data
#         response = intermo._call_intermo(endpoint="pay", payload=body, token=self.intermo_auth_key, intermo_mode=self.intermo_mode)
#         print("=----------------33333--------", data)
#         if response.get('paymentlink') and not response.get('errorCode'):

#             qr = qrcode.QRCode(
#                 version=1,  # Controls the size of the QR code
#                 error_correction=qrcode.constants.ERROR_CORRECT_L,  # Error correction level
#                 box_size=10,  # Size of each box in pixels
#                 border=4,  # Border size in boxes
#             )

#             value_after_pay = response['paymentlink'].split('/pay/')[1]

#             # Add data (URL) to the QR code
#             qr.add_data(response['paymentlink'])
#             _logger.info(f"QR Code Payment Link {response['paymentlink']}")
#             _logger.info(f"JWT Token {value_after_pay}")
#             qr.make(fit=True)

#             # Create an image from the QR code
#             img = qr.make_image(fill='black', back_color='white')
#             buffer = BytesIO()
#             img.save(buffer, format="PNG")

#             # Get the bytes of the image
#             img_bytes = buffer.getvalue()

#             # Convert the image bytes to a base64 string
#             img_base64 = base64.b64encode(img_bytes).decode('utf-8')
#             return {'qr_code': img_base64,'jwt_token': value_after_pay }

#         default_error_msg = _('Intermo POS payment request expected errorCode not found in the response')
#         error = response.get('errorMessage') or default_error_msg
#         return {'error': str(error)}


#     def intermo_cancel_payment_request(self, data):

#         return {'errorMessage': ""}
from odoo.exceptions import UserError
from odoo import fields, models, api, _
import qrcode
from io import BytesIO
import base64
import requests
import logging
import json

_logger = logging.getLogger(__name__)

class PosSession(models.Model):
    _inherit = 'pos.session'

    def _loader_params_pos_payment_method(self):
        result = super()._loader_params_pos_payment_method()
        result['search_params']['fields'].append('intermo_mode')
        return result


class PosPaymentMethod(models.Model):
    _inherit = 'pos.payment.method'

    # Environment mode
    intermo_mode = fields.Selection([('test', 'Sandbox'), ('live', 'Production')], string="Environment Mode")

    def _get_intermo_keys(self):
        """Retrieve API keys based on the environment mode from ir.config_parameter."""
        params = self.env['ir.config_parameter'].sudo()
        mode_prefix = 'sandbox' if self.intermo_mode == 'test' else 'live'
        
        keys = {
            'api_key': params.get_param(f'intermo.{mode_prefix}_api_key'),
            'secret_key': params.get_param(f'intermo.{mode_prefix}_secret_key'),
            'auth_key': params.get_param(f'intermo.{mode_prefix}_auth_key'),
            'plugin_key': params.get_param('intermo.plugin_key', default='default_plugin_key'),
            'notify_url': params.get_param('intermo.notify_url', default='https://default.notify.url')
        }
        
        if not all(keys.values()):
            raise UserError(_("Intermo API settings are not fully configured. Please check the configuration."))

        # Log the keys for debugging
        _logger.info(f"Using Intermo settings keys: Public Key: {keys['api_key']}, Secret Key: {keys['secret_key']}, Auth Key: {keys['auth_key']}")
        return keys

    def intermo_get_payment_status(self, data):
        """Fetch the payment status from the Intermo API based on environment settings."""
        keys = self._get_intermo_keys()
        url = f'https://prodapi.intermo.net/api/v1/pos/status/{data}' if self.intermo_mode == 'live' else f'http://localhost:7777/api/v1/pos/status/{data}'

        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {keys["auth_key"]}'
        }
        payload = json.dumps({
            "publicApiKey": keys['api_key'],
            "secretKey": keys['secret_key']
        })

        _logger.info("Sending payment status request to %s with payload: %s", url, payload)
        try:
            response = requests.get(url, headers=headers, data=payload)
            response.raise_for_status()  # Will raise an error for 4XX/5XX responses
            response_data = response.json()
            _logger.info("Response received: %s", response_data)
            return response_data.get('paymentStatus', 'unknown_status')
        except requests.RequestException as e:
            _logger.error("Failed to retrieve payment status: %s", e)
            raise UserError(_("Failed to retrieve payment status. Please try again later."))

    def intermo_make_payment_request(self, data):
        """Make a payment request and generate a QR code if successful."""
        keys = self._get_intermo_keys()
        payload = {
            "amount": data['amount'],
            "currency": data['currency'],
            "description": data.get('description', 'POS Payment'),
            "publicApiKey": keys['api_key'],
            "secretKey": keys['secret_key'],
            "pluginKey": keys['plugin_key'],  # Plugin key is also retrieved from IntermoSettings
            "notifyUrl": keys['notify_url']
        }

        url = 'https://prodapi.intermo.net/api/v1/pos/pay' if self.intermo_mode == 'live' else 'http://localhost:7777/api/v1/pos/pay'
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {keys["auth_key"]}'
        }

        _logger.info("Sending payment request to %s with payload: %s", url, payload)
        try:
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            response_data = response.json()

            if 'paymentlink' in response_data and 'errorCode' not in response_data:
                qr = qrcode.QRCode(
                    version=1,
                    error_correction=qrcode.constants.ERROR_CORRECT_L,
                    box_size=10,
                    border=4,
                )
                qr.add_data(response_data['paymentlink'])
                qr.make(fit=True)

                # Convert QR code to base64
                img = qr.make_image(fill='black', back_color='white')
                buffer = BytesIO()
                img.save(buffer, format="PNG")
                img_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')

                value_after_pay = response_data['paymentlink'].split('/pay/')[1]
                return {'qr_code': img_base64, 'jwt_token': value_after_pay}
            
            error_message = response_data.get('errorMessage', _('Unknown error occurred during payment request'))
            _logger.error("Payment request error: %s", error_message)
            return {'error': error_message}
        except requests.RequestException as e:
            _logger.error("Failed to make payment request: %s", e)
            raise UserError(_("Failed to make payment request. Please try again later."))

    def intermo_cancel_payment_request(self, data):
        """Cancels a payment request."""
        # Implement cancellation logic if provided by Intermo API
        # For example, assuming cancellation URL exists, it might look like this:
        url = f'https://prodapi.intermo.net/api/v1/pos/cancel/{data}' if self.intermo_mode == 'live' else f'http://localhost:7777/api/v1/pos/cancel/{data}'
        
        keys = self._get_intermo_keys()
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {keys["auth_key"]}'
        }

        try:
            _logger.info("Sending cancellation request to %s", url)
            response = requests.post(url, headers=headers)
            response.raise_for_status()
            _logger.info("Cancellation successful for request ID: %s", data)
            return {'message': _("Payment cancelled successfully.")}
        except requests.RequestException as e:
            _logger.error("Failed to cancel payment request: %s", e)
            raise UserError(_("Failed to cancel payment request. Please try again later."))
